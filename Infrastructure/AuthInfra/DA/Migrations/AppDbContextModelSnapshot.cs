// <auto-generated />
using System;
using DA.AppDbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DA.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DM.DomainModels.Actions", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("DM.DomainModels.Credential", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Credential");

                    b.HasData(
                        new
                        {
                            Id = "10bcc73c-e40a-4852-a81d-c18d654e8806",
                            CreatedBy = "72990663-2edc-4c10-b331-cd1c65e477e0",
                            CreatedDate = new DateTime(2024, 9, 16, 7, 57, 0, 692, DateTimeKind.Utc).AddTicks(6472),
                            IsActive = true,
                            IsArchived = false,
                            PasswordHash = "d9eaIWSBDoLwkZMUgEdNzYyiwHFg1rcR3gZRlRVYIDQ=",
                            PasswordSalt = "TzYRkd2fsMUus0DoHl4Dmw==",
                            UpdatedBy = "72990663-2edc-4c10-b331-cd1c65e477e0",
                            UpdatedDate = new DateTime(2024, 9, 16, 7, 57, 0, 692, DateTimeKind.Utc).AddTicks(6472),
                            UserId = "72990663-2edc-4c10-b331-cd1c65e477e0"
                        });
                });

            modelBuilder.Entity("DM.DomainModels.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "78f4b56a-3fa3-4067-b641-7adb0a7a2ca7",
                            CreatedBy = "72990663-2edc-4c10-b331-cd1c65e477e0",
                            CreatedDate = new DateTime(2024, 9, 16, 7, 57, 0, 692, DateTimeKind.Utc).AddTicks(6472),
                            IsActive = true,
                            IsArchived = false,
                            Name = "SuperAdmin",
                            UpdatedBy = "72990663-2edc-4c10-b331-cd1c65e477e0",
                            UpdatedDate = new DateTime(2024, 9, 16, 7, 57, 0, 692, DateTimeKind.Utc).AddTicks(6472)
                        });
                });

            modelBuilder.Entity("DM.DomainModels.RoleAction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ActionId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleActions");
                });

            modelBuilder.Entity("DM.DomainModels.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "72990663-2edc-4c10-b331-cd1c65e477e0",
                            CreatedBy = "72990663-2edc-4c10-b331-cd1c65e477e0",
                            CreatedDate = new DateTime(2024, 9, 16, 7, 57, 0, 692, DateTimeKind.Utc).AddTicks(6472),
                            Email = "POS@gmail.com",
                            IsActive = true,
                            IsArchived = false,
                            Name = "POS",
                            UpdatedBy = "72990663-2edc-4c10-b331-cd1c65e477e0",
                            UpdatedDate = new DateTime(2024, 9, 16, 7, 57, 0, 692, DateTimeKind.Utc).AddTicks(6472),
                            UserType = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("DM.DomainModels.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("userRoles");

                    b.HasData(
                        new
                        {
                            Id = "f3df99c7-07fb-4b7f-89e5-89d86b84bd4e",
                            CreatedBy = "72990663-2edc-4c10-b331-cd1c65e477e0",
                            CreatedDate = new DateTime(2024, 9, 16, 7, 57, 0, 692, DateTimeKind.Utc).AddTicks(6472),
                            IsActive = true,
                            IsArchived = false,
                            RoleId = "78f4b56a-3fa3-4067-b641-7adb0a7a2ca7",
                            UpdatedBy = "72990663-2edc-4c10-b331-cd1c65e477e0",
                            UpdatedDate = new DateTime(2024, 9, 16, 7, 57, 0, 692, DateTimeKind.Utc).AddTicks(6472),
                            UserId = "72990663-2edc-4c10-b331-cd1c65e477e0"
                        });
                });

            modelBuilder.Entity("DM.DomainModels.Credential", b =>
                {
                    b.HasOne("DM.DomainModels.User", "User")
                        .WithOne("Credential")
                        .HasForeignKey("DM.DomainModels.Credential", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DM.DomainModels.RoleAction", b =>
                {
                    b.HasOne("DM.DomainModels.Actions", "Actions")
                        .WithMany("RoleActions")
                        .HasForeignKey("ActionId");

                    b.HasOne("DM.DomainModels.Role", "Role")
                        .WithMany("RoleAction")
                        .HasForeignKey("RoleId");

                    b.Navigation("Actions");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DM.DomainModels.UserRole", b =>
                {
                    b.HasOne("DM.DomainModels.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("DM.DomainModels.User", "User")
                        .WithMany("UserRole")
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DM.DomainModels.Actions", b =>
                {
                    b.Navigation("RoleActions");
                });

            modelBuilder.Entity("DM.DomainModels.Role", b =>
                {
                    b.Navigation("RoleAction");
                });

            modelBuilder.Entity("DM.DomainModels.User", b =>
                {
                    b.Navigation("Credential");

                    b.Navigation("UserRole");
                });
#pragma warning restore 612, 618
        }
    }
}
