# 0 INITIALIZE WITH CURRENT NODE AS MANAGER
## docker swarm init

# 1 BUILD ALL BEFORE DEPLOYING UP THE SWARM
## docker-compose build

# 2 TAG EACH & UPDATE .YML BEFORE DEPLOY
## docker tag pos_sprint3_swarm-store:latest posstack_store:latest
## docker tag pos_sprint3_swarm-hub:latest posstack_hub:latest
## docker tag pos_sprint3_swarm-auth:latest posstack_auth:latest

# 3 DEPLOY
## docker stack deploy -c docker-compose.yml posstack

# 8 MAINTAINENCE
## docker service update --image posstack_store:latest posstack_store
## docker swarm join --token <workertoken> <ip:port>
## docker swarm join-token manager
## docker swarm leave --force



version: '3.8'

services:

  authdb:
    image: postgres:16.4
    container_name: authdb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Pos!23
      POSTGRES_DB: AuthDB
    ports:
      - "5436:5432"
    volumes:
      - ./auth_local_shared_db:/var/lib/postgresql/data
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  hubdb:
    image: postgres:16.4
    container_name: hubdb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Pos!23
      POSTGRES_DB: HubDB
    ports:
      - "5435:5432"
    volumes:
      - ./hub_local_shared_db:/var/lib/postgresql/data
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  storedb:
    image: postgres:16.4
    container_name: storedb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Pos!23
      POSTGRES_DB: storeDB
    ports:
      - "5437:5432"
    volumes:
      - ./store_local_shared_db:/var/lib/postgresql/data
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  store:
    image: posstack_store:latest  # Updated with the tagged image reference
    container_name: store_container
    ports:
      - "6080:6080"
      - "6081:6081"
      - "6082:6082"
    depends_on:
      - storedb
    environment:
      - DB_HOST=storedb
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=12345
      - DB_NAME=storeDB
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  hub:
    image: posstack_hub:latest  # Updated with the tagged image reference
    container_name: hub_container
    ports:
      - "9080:9080"
      - "9081:9081"
      - "9082:9082"
    depends_on:
      - hubdb
      - redis
    environment:
      - DB_HOST=hubdb
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=Pos!23
      - DB_NAME=HubDB
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  auth:
    image: posstack_auth:latest  # Updated with the tagged image reference
    container_name: auth_container
    ports:
      - "7080:7080"
      - "7081:7081"
      - "7082:7082"
    depends_on:
      - authdb
    environment:
      - DB_HOST=authdb
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=Pos!23
      - DB_NAME=AuthDB
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  redis:
    image: redis:latest
    container_name: redis_container
    ports:
      - "6379:6379"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

volumes:
  auth_local_shared_db:
    driver: local
  hub_local_shared_db:
    driver: local
  store_local_shared_db:
    driver: local



# INSPECTION

## docker logs <container_id> 
## docker stats

## docker stack ps posstack
## docker stack services posstack
## docker service ps posstack_auth 
## docker logs posstack_auth --tail 100
## docker service logs posstack_auth --tail 100

# docker <(container) or node or service / network> inspect <id / ingress>